// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/consigment/consigment.proto

/*
Package consignment is a generated protocol buffer package.

It is generated from these files:
	proto/consigment/consigment.proto

It has these top-level messages:
	Request
	Response
	OuterSearcher
	AnotherSeacher
	TimeDate
*/
package consignment

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Строго нумерация с нуля!
type Response_Things int32

const (
	Response_FIRST  Response_Things = 0
	Response_SECOND Response_Things = 1
	Response_THIRD  Response_Things = 3
	Response_FOURTH Response_Things = 4
)

var Response_Things_name = map[int32]string{
	0: "FIRST",
	1: "SECOND",
	3: "THIRD",
	4: "FOURTH",
}
var Response_Things_value = map[string]int32{
	"FIRST":  0,
	"SECOND": 1,
	"THIRD":  3,
	"FOURTH": 4,
}

func (x Response_Things) String() string {
	return proto.EnumName(Response_Things_name, int32(x))
}
func (Response_Things) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

// Обозначение именованного набора полей
type Request struct {
	// тип имя = номер поля;
	Body   string `protobuf:"bytes,1,opt,name=body" json:"body,omitempty"`
	Age    int32  `protobuf:"varint,2,opt,name=age" json:"age,omitempty"`
	Salary int64  `protobuf:"varint,3,opt,name=salary" json:"salary,omitempty"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Request) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *Request) GetAge() int32 {
	if m != nil {
		return m.Age
	}
	return 0
}

func (m *Request) GetSalary() int64 {
	if m != nil {
		return m.Salary
	}
	return 0
}

type Response struct {
	MyDouble  float64         `protobuf:"fixed64,1,opt,name=my_double,json=myDouble" json:"my_double,omitempty"`
	MyFloat   float32         `protobuf:"fixed32,2,opt,name=my_float,json=myFloat" json:"my_float,omitempty"`
	MyUint32  uint32          `protobuf:"varint,3,opt,name=my_uint32,json=myUint32" json:"my_uint32,omitempty"`
	MyUint64  uint64          `protobuf:"varint,4,opt,name=my_uint64,json=myUint64" json:"my_uint64,omitempty"`
	MyFixed32 uint32          `protobuf:"fixed32,5,opt,name=my_fixed32,json=myFixed32" json:"my_fixed32,omitempty"`
	MyBool    bool            `protobuf:"varint,6,opt,name=my_bool,json=myBool" json:"my_bool,omitempty"`
	MyString  string          `protobuf:"bytes,7,opt,name=my_string,json=myString" json:"my_string,omitempty"`
	MyBytes   []byte          `protobuf:"bytes,8,opt,name=my_bytes,json=myBytes,proto3" json:"my_bytes,omitempty"`
	Things    Response_Things `protobuf:"varint,9,opt,name=things,enum=consignment.Response_Things" json:"things,omitempty"`
	Req       *Request        `protobuf:"bytes,10,opt,name=req" json:"req,omitempty"`
	Snippet   []*Request      `protobuf:"bytes,11,rep,name=snippet" json:"snippet,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Response) GetMyDouble() float64 {
	if m != nil {
		return m.MyDouble
	}
	return 0
}

func (m *Response) GetMyFloat() float32 {
	if m != nil {
		return m.MyFloat
	}
	return 0
}

func (m *Response) GetMyUint32() uint32 {
	if m != nil {
		return m.MyUint32
	}
	return 0
}

func (m *Response) GetMyUint64() uint64 {
	if m != nil {
		return m.MyUint64
	}
	return 0
}

func (m *Response) GetMyFixed32() uint32 {
	if m != nil {
		return m.MyFixed32
	}
	return 0
}

func (m *Response) GetMyBool() bool {
	if m != nil {
		return m.MyBool
	}
	return false
}

func (m *Response) GetMyString() string {
	if m != nil {
		return m.MyString
	}
	return ""
}

func (m *Response) GetMyBytes() []byte {
	if m != nil {
		return m.MyBytes
	}
	return nil
}

func (m *Response) GetThings() Response_Things {
	if m != nil {
		return m.Things
	}
	return Response_FIRST
}

func (m *Response) GetReq() *Request {
	if m != nil {
		return m.Req
	}
	return nil
}

func (m *Response) GetSnippet() []*Request {
	if m != nil {
		return m.Snippet
	}
	return nil
}

type OuterSearcher struct {
	Result []*OuterSearcher_InnerSearcher `protobuf:"bytes,1,rep,name=result" json:"result,omitempty"`
}

func (m *OuterSearcher) Reset()                    { *m = OuterSearcher{} }
func (m *OuterSearcher) String() string            { return proto.CompactTextString(m) }
func (*OuterSearcher) ProtoMessage()               {}
func (*OuterSearcher) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *OuterSearcher) GetResult() []*OuterSearcher_InnerSearcher {
	if m != nil {
		return m.Result
	}
	return nil
}

type OuterSearcher_InnerSearcher struct {
	Code int32  `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Url  string `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
}

func (m *OuterSearcher_InnerSearcher) Reset()                    { *m = OuterSearcher_InnerSearcher{} }
func (m *OuterSearcher_InnerSearcher) String() string            { return proto.CompactTextString(m) }
func (*OuterSearcher_InnerSearcher) ProtoMessage()               {}
func (*OuterSearcher_InnerSearcher) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

func (m *OuterSearcher_InnerSearcher) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *OuterSearcher_InnerSearcher) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type AnotherSeacher struct {
	Result *OuterSearcher_InnerSearcher `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *AnotherSeacher) Reset()                    { *m = AnotherSeacher{} }
func (m *AnotherSeacher) String() string            { return proto.CompactTextString(m) }
func (*AnotherSeacher) ProtoMessage()               {}
func (*AnotherSeacher) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *AnotherSeacher) GetResult() *OuterSearcher_InnerSearcher {
	if m != nil {
		return m.Result
	}
	return nil
}

type TimeDate struct {
	Year  int32 `protobuf:"varint,1,opt,name=year" json:"year,omitempty"`
	Month int32 `protobuf:"varint,2,opt,name=month" json:"month,omitempty"`
	Day   int32 `protobuf:"varint,3,opt,name=day" json:"day,omitempty"`
	Hour  int32 `protobuf:"varint,4,opt,name=hour" json:"hour,omitempty"`
}

func (m *TimeDate) Reset()                    { *m = TimeDate{} }
func (m *TimeDate) String() string            { return proto.CompactTextString(m) }
func (*TimeDate) ProtoMessage()               {}
func (*TimeDate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *TimeDate) GetYear() int32 {
	if m != nil {
		return m.Year
	}
	return 0
}

func (m *TimeDate) GetMonth() int32 {
	if m != nil {
		return m.Month
	}
	return 0
}

func (m *TimeDate) GetDay() int32 {
	if m != nil {
		return m.Day
	}
	return 0
}

func (m *TimeDate) GetHour() int32 {
	if m != nil {
		return m.Hour
	}
	return 0
}

func init() {
	proto.RegisterType((*Request)(nil), "consignment.Request")
	proto.RegisterType((*Response)(nil), "consignment.Response")
	proto.RegisterType((*OuterSearcher)(nil), "consignment.OuterSearcher")
	proto.RegisterType((*OuterSearcher_InnerSearcher)(nil), "consignment.OuterSearcher.InnerSearcher")
	proto.RegisterType((*AnotherSeacher)(nil), "consignment.AnotherSeacher")
	proto.RegisterType((*TimeDate)(nil), "consignment.TimeDate")
	proto.RegisterEnum("consignment.Response_Things", Response_Things_name, Response_Things_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TestService service

type TestServiceClient interface {
	// Можно передать в качестве аргумента что-то, а можно и ничего
	HttpGET(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	HttpPOST(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	CurrentTime(ctx context.Context, in *TimeDate, opts ...grpc.CallOption) (*TimeDate, error)
}

type testServiceClient struct {
	cc *grpc.ClientConn
}

func NewTestServiceClient(cc *grpc.ClientConn) TestServiceClient {
	return &testServiceClient{cc}
}

func (c *testServiceClient) HttpGET(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/consignment.TestService/HttpGET", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) HttpPOST(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/consignment.TestService/HttpPOST", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) CurrentTime(ctx context.Context, in *TimeDate, opts ...grpc.CallOption) (*TimeDate, error) {
	out := new(TimeDate)
	err := grpc.Invoke(ctx, "/consignment.TestService/CurrentTime", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TestService service

type TestServiceServer interface {
	// Можно передать в качестве аргумента что-то, а можно и ничего
	HttpGET(context.Context, *Request) (*Response, error)
	HttpPOST(context.Context, *Request) (*Response, error)
	CurrentTime(context.Context, *TimeDate) (*TimeDate, error)
}

func RegisterTestServiceServer(s *grpc.Server, srv TestServiceServer) {
	s.RegisterService(&_TestService_serviceDesc, srv)
}

func _TestService_HttpGET_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).HttpGET(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/consignment.TestService/HttpGET",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).HttpGET(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_HttpPOST_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).HttpPOST(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/consignment.TestService/HttpPOST",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).HttpPOST(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_CurrentTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimeDate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).CurrentTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/consignment.TestService/CurrentTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).CurrentTime(ctx, req.(*TimeDate))
	}
	return interceptor(ctx, in, info, handler)
}

var _TestService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "consignment.TestService",
	HandlerType: (*TestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HttpGET",
			Handler:    _TestService_HttpGET_Handler,
		},
		{
			MethodName: "HttpPOST",
			Handler:    _TestService_HttpPOST_Handler,
		},
		{
			MethodName: "CurrentTime",
			Handler:    _TestService_CurrentTime_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/consigment/consigment.proto",
}

func init() { proto.RegisterFile("proto/consigment/consigment.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 576 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0x5f, 0x6f, 0xd3, 0x3e,
	0x14, 0x9d, 0x97, 0xe6, 0x4f, 0x6f, 0x7f, 0x9b, 0x2a, 0x6b, 0x3f, 0x30, 0x03, 0xa4, 0x90, 0x07,
	0x94, 0xa7, 0x20, 0x75, 0x63, 0x82, 0x07, 0x24, 0xd8, 0xba, 0x6e, 0x7b, 0xa1, 0xc8, 0xc9, 0x5e,
	0x78, 0x99, 0xd2, 0xd6, 0xb4, 0x91, 0x12, 0xbb, 0x73, 0x1c, 0x84, 0xbf, 0x01, 0x9f, 0x87, 0x6f,
	0xc0, 0x37, 0x43, 0x76, 0x52, 0xb1, 0xc2, 0x78, 0x80, 0xb7, 0x73, 0xee, 0xbd, 0xe7, 0xfa, 0x38,
	0x3e, 0x0a, 0x3c, 0x5b, 0x4b, 0xa1, 0xc4, 0x8b, 0xb9, 0xe0, 0x75, 0xb1, 0xac, 0x18, 0x57, 0x77,
	0x60, 0x62, 0x7b, 0x78, 0xd0, 0x56, 0xb8, 0x29, 0x45, 0x17, 0xe0, 0x53, 0x76, 0xdb, 0xb0, 0x5a,
	0x61, 0x0c, 0xbd, 0x99, 0x58, 0x68, 0x82, 0x42, 0x14, 0xf7, 0xa9, 0xc5, 0x78, 0x08, 0x4e, 0xbe,
	0x64, 0x64, 0x37, 0x44, 0xb1, 0x4b, 0x0d, 0xc4, 0x0f, 0xc0, 0xab, 0xf3, 0x32, 0x97, 0x9a, 0x38,
	0x21, 0x8a, 0x1d, 0xda, 0xb1, 0xe8, 0x9b, 0x03, 0x01, 0x65, 0xf5, 0x5a, 0xf0, 0x9a, 0xe1, 0xc7,
	0xd0, 0xaf, 0xf4, 0xcd, 0x42, 0x34, 0xb3, 0x92, 0xd9, 0x7d, 0x88, 0x06, 0x95, 0x1e, 0x5b, 0x8e,
	0x1f, 0x41, 0x50, 0xe9, 0x9b, 0x4f, 0xa5, 0xc8, 0x95, 0x5d, 0xbc, 0x4b, 0xfd, 0x4a, 0x4f, 0x0c,
	0xed, 0x74, 0x4d, 0xc1, 0xd5, 0xd1, 0xc8, 0xee, 0xdf, 0x33, 0xba, 0x6b, 0xcb, 0xef, 0x34, 0x4f,
	0x8e, 0x49, 0x2f, 0x44, 0x71, 0x6f, 0xd3, 0x3c, 0x39, 0xc6, 0x4f, 0x01, 0xcc, 0xd2, 0xe2, 0x0b,
	0x5b, 0x1c, 0x8d, 0x88, 0x1b, 0xa2, 0xd8, 0xa7, 0xfd, 0x4a, 0x4f, 0xda, 0x02, 0x7e, 0x08, 0x7e,
	0xa5, 0x6f, 0x66, 0x42, 0x94, 0xc4, 0x0b, 0x51, 0x1c, 0x50, 0xaf, 0xd2, 0xa7, 0x42, 0x94, 0xdd,
	0xd2, 0x5a, 0xc9, 0x82, 0x2f, 0x89, 0x6f, 0x6f, 0x1e, 0x54, 0x3a, 0xb5, 0xbc, 0x73, 0x3a, 0xd3,
	0x8a, 0xd5, 0x24, 0x08, 0x51, 0xfc, 0x9f, 0x71, 0x7a, 0x6a, 0x28, 0x3e, 0x06, 0x4f, 0xad, 0x0a,
	0xbe, 0xac, 0x49, 0x3f, 0x44, 0xf1, 0xfe, 0xe8, 0x49, 0x72, 0xe7, 0xab, 0x26, 0x9b, 0x0f, 0x91,
	0x64, 0x76, 0x86, 0x76, 0xb3, 0xf8, 0x39, 0x38, 0x92, 0xdd, 0x12, 0x08, 0x51, 0x3c, 0x18, 0x1d,
	0xfc, 0x22, 0xb1, 0xaf, 0x40, 0xcd, 0x00, 0x4e, 0xc0, 0xaf, 0x79, 0xb1, 0x5e, 0x33, 0x45, 0x06,
	0xa1, 0xf3, 0xc7, 0xd9, 0xcd, 0x50, 0x74, 0x02, 0x5e, 0x7b, 0x12, 0xee, 0x83, 0x3b, 0xb9, 0xa2,
	0x69, 0x36, 0xdc, 0xc1, 0x00, 0x5e, 0x7a, 0x7e, 0x36, 0x7d, 0x3f, 0x1e, 0x22, 0x53, 0xce, 0x2e,
	0xaf, 0xe8, 0x78, 0xe8, 0x98, 0xf2, 0x64, 0x7a, 0x4d, 0xb3, 0xcb, 0x61, 0x2f, 0xfa, 0x8a, 0x60,
	0x6f, 0xda, 0x28, 0x26, 0x53, 0x96, 0xcb, 0xf9, 0x8a, 0x49, 0xfc, 0x16, 0x3c, 0xc9, 0xea, 0xa6,
	0x54, 0x04, 0xd9, 0x83, 0xe3, 0xad, 0x83, 0xb7, 0x66, 0x93, 0x2b, 0xce, 0x7f, 0x32, 0xda, 0xe9,
	0x0e, 0x5f, 0xc2, 0xde, 0x56, 0xc3, 0xe4, 0x6a, 0x2e, 0x16, 0x6d, 0x0e, 0x5c, 0x6a, 0xb1, 0xc9,
	0x55, 0x23, 0x4b, 0xfb, 0xfc, 0x7d, 0x6a, 0x60, 0x44, 0x61, 0xff, 0x1d, 0x17, 0x6a, 0x65, 0x85,
	0xbf, 0x59, 0x41, 0xff, 0x62, 0x25, 0xfa, 0x08, 0x41, 0x56, 0x54, 0x6c, 0x9c, 0x2b, 0x66, 0x5c,
	0x68, 0x96, 0xcb, 0x8d, 0x0b, 0x83, 0xf1, 0x01, 0xb8, 0x95, 0xe0, 0x6a, 0xd5, 0xe5, 0xbb, 0x25,
	0xc6, 0xdb, 0x22, 0x6f, 0xe3, 0xed, 0x52, 0x03, 0x8d, 0x76, 0x25, 0x1a, 0x69, 0x43, 0xe7, 0x52,
	0x8b, 0x47, 0xdf, 0x11, 0x0c, 0x32, 0x56, 0xab, 0x94, 0xc9, 0xcf, 0xc5, 0x9c, 0xe1, 0x57, 0xe0,
	0x5f, 0x2a, 0xb5, 0xbe, 0x38, 0xcf, 0xf0, 0xbd, 0x8f, 0x75, 0xf8, 0xff, 0xbd, 0x09, 0x89, 0x76,
	0xf0, 0x6b, 0x08, 0x8c, 0xf2, 0xc3, 0x34, 0xfd, 0x6b, 0xe9, 0x1b, 0x18, 0x9c, 0x35, 0x52, 0x32,
	0xae, 0xcc, 0x3d, 0xf1, 0xf6, 0xdc, 0xe6, 0xea, 0x87, 0xf7, 0x97, 0xa3, 0x9d, 0x99, 0x67, 0x7f,
	0x08, 0x47, 0x3f, 0x02, 0x00, 0x00, 0xff, 0xff, 0xb8, 0x6f, 0xa2, 0x4d, 0x35, 0x04, 0x00, 0x00,
}
